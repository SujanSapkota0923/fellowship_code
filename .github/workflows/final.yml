name: FULL STACK DEVELOPMENT

on:
  push:
    branches: [main, dev]
    # paths:
    #   - "code/backend1/**"
    #   - "code/backend2/**"
    #   - "code/frontend/**"
  pull_request:
    branches: [main, dev]
    # paths:
    #   - "code/backend1/**"
    #   - "code/backend2/**"
    #   - "code/frontend/**"

jobs:
  backend:
    name: backednd build and deploy
    runs-on: second
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

          # this searches for caching
      - name: Cache Backend1
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-backend1-yarn-${{ hashFiles('code/backend1/yarn.lock') }}

      - name: Install backend1 dependencies
        run: |
          cd code/backend1
          yarn install

      - name: Build Backend1
        run: |
          cd code/backend1
          yarn build
        # this uploads to the cache
      - name: Upload backend1 build
        uses: actions/upload-artifact@v4
        with:
          name: backend1-build
          path: code/backend1/dist
  
      - name: Cache Backend2
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-backend2-yarn-${{ hashFiles('code/backend2/yarn.lock') }}

      - name: Install backend2 dependencies
        run: |
          cd code/backend2
          yarn install

      - name: Build Backend2
        run: |
          cd code/backend2
          yarn build

      - name: Upload backend2 build
        uses: actions/upload-artifact@v4
        with:
          name: backend2-build
          path: code/backend2/dist


      - name: Cache frontend
        uses: actions/cache@v3
        with:
          path: ~/.cache/yarn
          key: ${{ runner.os }}-frontend-yarn-${{ hashFiles('code/frontend/yarn.lock') }}

      - name: Install frontend dependencies
        run: |
          cd code/frontend
          yarn install

      - name: Build frontend
        run: |
          cd code/frontend
          yarn build

      - name: Upload frontend build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build

          path: code/frontend/dist
      

      - name: set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with: 
          username: ${{secrets.DOCKER_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}

      - name: Build and Push Backend1 Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend1
          file: ./code/backend1/Dockerfile
          push: true
          tags: |
            ${{secrets.DOCKER_USERNAME}}/backend1:latest
            ${{secrets.DOCKER_USERNAME}}/backend1:${{github.sha}}


      - name: Build and Push Backend2 Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./code/backend2
          file: ./code/backend2/Dockerfile
          push: true
          tags: |
            ${{secrets.DOCKER_USERNAME}}/backend2:latest
            ${{secrets.DOCKER_USERNAME}}/backend2:${{github.sha}}


      - name: Build and Push frontend Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./code/frontend
          file: ./code/frontend/Dockerfile
          push: true
          tags: |
            ${{secrets.DOCKER_USERNAME}}/frontend:latest
            ${{secrets.DOCKER_USERNAME}}/frontend:${{github.sha}}

      

      # - name: Deploy to Remote VM
      #   uses: appleboy/ssh-action@v1.0.0
      #   with:
      #     host: ${{ secrets.SSH_HOST }}
      #     username: ${{ secrets.SSH_USER }}
      #     key: ${{ secrets.SSH_KEY }}

      #     script: |
      #       docker pull ${{ secrets.DOCKER_USERNAME }}/backend1:latest
      #       docker pull ${{ secrets.DOCKER_USERNAME }}/backend2:latest
      #       docker pull ${{ secrets.DOCKER_USERNAME }}/frontend:latest
            
      #       docker stop backend1 || true && docker rm backend1 || true
      #       docker stop backend2 || true && docker rm backend2 || true
      #       docker stop frontend || true && docker rm frontend || true

      #       docker run -d --name backend1 -p 3001:3000 ${{ secrets.DOCKER_USERNAME }}/backend1:latest
      #       docker run -d --name backend2 -p 3002:3000 ${{ secrets.DOCKER_USERNAME }}/backend2:latest
      #       docker run -d --name frontend -p 80:80 ${{ secrets.DOCKER_USERNAME }}/frontend:latest


      - name: Create GitHub Release
        if: github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: release-${{ github.sha }}
          name: Release ${{ github.sha }}
          body: |
            Automated release from GitHub Actions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
